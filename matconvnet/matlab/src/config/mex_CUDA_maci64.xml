<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright 2013 The MathWorks, Inc. -->
<config
    Name="nvcc"
    ShortName="nvcc"
    Manufacturer="NVIDIA"
    Version=""
    Language="CUDA"
    Priority="A"
    Location="$NVCC" >
    <Details
        CompilerExecutable="$CXX"
        CompilerDefines="$DEFINES"
        CompilerFlags="$CXXFLAGS"
        OptimizationFlags="$CXXOPTIMFLAGS"
        DebugFlags="$CXXDEBUGFLAGS"
        IncludeFlags="$INCLUDE"
        LinkerLibraries="$LINKLIBS"
        LinkerOptimizationFlags="$LDOPTIMFLAGS"
        LinkerDebugFlags="$LDDEBUGFLAGS"

        CompilerDefineFormatter="-D%s"
        LinkerLibrarySwitchFormatter="-l%s"
        LinkerPathFormatter="-L%s"
    />
    <vars
          CMDLINE1="$CXX -c $DEFINES $INCLUDE $NVCCFLAGS $CXXFLAGS $OPTIM $SRC -o $OBJ"
          CMDLINE2="$LDXX $LDFLAGS $LINKOPTIM $LINKEXPORT $OBJS $CXXLIBS $LINKLIBS -o $EXE"
          CMDLINE3="rm -f $OBJ"

          CXX="$NVCC"
          DEFINES="$MATLABMEX"
          MATLABMEX="-DMATLAB_MEX_FILE"
          NVCCFLAGS="-gencode=arch=compute_20,code=sm_20 -gencode=arch=compute_30,code=&#92;&quot;sm_30,compute_30&#92;&quot; -m 64 $NVCC_FLAGS"
          CXXFLAGS="--compiler-bindir=$CLANG_COMPILER --compiler-options=-fno-common,-arch,$ARCHS,-mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET,-fexceptions,-isysroot,$ISYSROOT"
          INCLUDE="-I&quot;$MATLABROOT/extern/include&quot; -I&quot;$MATLABROOT/simulink/include&quot; -I&quot;$MATLABROOT/toolbox/distcomp/gpu/extern/include/&quot;"
          CXXOPTIMFLAGS="-O2 -DNDEBUG"
          CXXDEBUGFLAGS="-g"
          ARCHS="x86_64"

          LDXX="$XCRUN_DIR/xcrun -sdk macosx10.8 clang++"
          LDFLAGS="-stdlib=libstdc++ -Wl,-twolevel_namespace -undefined error -arch $ARCHS -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET -Wl,-syslibroot,$ISYSROOT $LDBUNDLE $LINKEXPORT"
          LDBUNDLE="-bundle"
          LINKEXPORT="-Wl,-exported_symbols_list,&quot;$MATLABROOT/extern/lib/$ARCH/mexFunction.map&quot;"
          LINKLIBS="-L&quot;$MATLABROOT/bin/$ARCH&quot; -lmx -lmex -lmat -lm -lmwgpu -lcudart"
          LDOPTIMFLAGS="-O"
          LDDEBUGFLAGS="-g"

          OBJEXT=".o"
          LDEXT=".mexmaci64"
          MACOSX_DEPLOYMENT_TARGET='10.8'>
    </vars>
    <client>
    </client>
    <locationFinder>
        <NVCC>
            <or>
                <and>
                    <envVarExists name="MW_NVCC_PATH" />
                    <dirExists name="$$" />
                    <fileExists name="$$/nvcc" />
                </and>
                <cmdReturns name="which nvcc" />
                <fileExists name="/usr/local/cuda-5.5/bin/nvcc" />
            </or>
        </NVCC>
        <CLANG_COMPILER>
            <or>
                <envVarExists name="MW_XCODE_CLANG_COMPILER" />
                <and>
                    <cmdReturns name="xcrun -f clang++" />
                    <dirExists name="$$" />
                    <fileExists name="$$/clang++" />
                </and>
            </or>
        </CLANG_COMPILER>
        <XCRUN_DIR>
            <and>
                <cmdReturns name="which xcrun" />
                <dirExists name="$$" />
            </and>
        </XCRUN_DIR>
        <ISYSROOT>
          <and>
              <cmdReturns name="xcode-select -print-path"/>
              <cmdReturns name="find $$ -name MacOSX10.8.sdk" />
              <dirExists name="$$" />
         </and>
        </ISYSROOT>
        <!-- User needs to agree to license of the version (or higher) that we support -->
        <XCODE_AGREED_VERSION>
            <and diagnostic="Xcode is installed, but its license has not been accepted. Run Xcode and accept its license agreement." >
<!--
                <cmdReturns name="&#10;agreed=$(defaults read com.apple.dt.Xcode Idexcodeversionforagreedtogmlicense) &#10; if echo $agreed | grep -E '[\.\&quot;]' >/dev/null; then &#10; lhs=`expr &quot;$agreed&quot; : '\([0-9]*\)[\.].*'` &#10;  rhs=`expr &quot;$agreed&quot; : '[0-9]*[\.]\(.*\)$'` &#10; if echo $rhs | grep -E '[\.&quot;]' >/dev/null; then &#10; rhs=`expr &quot;$rhs&quot; : '\([0-9]*\)[\.].*'` &#10; fi &#10; if [ $lhs -gt 4 ] || ( [ $lhs -eq 4 ] &amp;&amp; [ $rhs -ge 3 ] ); then &#10; echo $agreed &#10; else &#10; exit 1&#10; fi &#10; fi" />
-->
             <cmdReturns name="&#10; echo 5.0 &#10;" />
            </and>
        </XCODE_AGREED_VERSION>
    </locationFinder>
</config>
